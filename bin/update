#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
import sys
import re

import repolists

class GitRepo(object):
    def __init__(self, url, branch='master', directory=None, remotes=[]):
        self.url = re.sub('\.git$', '', url)
        self.branch = branch
        if directory is None:
            self.directory = os.path.expanduser('~/git/') + re.sub('\.git$',
                    '', url).split('/')[-1]
        else:
            self.directory = os.path.expanduser(directory)
        self.remotes = remotes

    def add_remotes(self):
        for name, url in self.remotes:
            try:
                subprocess.run(['git', '-C', self.directory, 'remote', 'add',
                    name, url], check=True)
            except subprocess.CalledProcessError as e:
                sys.exit('Failed to add remote to {}:\n{}'.format(
                        self.directory, e.stderr))
        return 0

    def checkout(self):
        try:
            subprocess.run(['git', '-C', self.directory, 'checkout',
                self.branch], check=True, capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to checkout Git repository {}:\n{}'.format(
                self.directory, e.stderr))
        return 0

    def clone(self):
        try:
            subprocess.run(['git', 'clone', self.url, self.directory],
                    check=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to clone {} to {}:\n{}'.format(self.url,
                    self.directory, e.stderr))
        self.add_remotes()
        return 0

    def pull(self):
        try:
            subprocess.run(['git', '-C', self.directory, 'checkout',
                self.branch], check=True, capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to checkout {}:\n{}'.format(self.directory,
                                                         e.stderr))

        try:
            subprocess.run(['git', '-C', self.directory, 'pull'], check=True,
                    capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to pull {} branch of {}:\n{}'.format(
                        self.branch, self.directory, e.stderr))

    def is_present(self):
        try:
            cmd = subprocess.run(['git', '-C', self.directory, 'remote',
                'get-url', 'origin'], check=True, capture_output=True,
                text=True)
        except subprocess.CalledProcessError as e:
            stderr = e.stderr.strip()
            if stderr.endswith('No such file or directory'):
                return False
            elif stderr.startswith('fatal: not a git repository'):
                sys.exit('Error: ' + self.directory
                        + ' already exists but is not a git repository')
            else:
                sys.exit('Failed to check if {} is a Git'
                         + 'repository:\n{}'.format(self.directory, e.stderr))
        if cmd.stdout.strip() != self.url:
            sys.exit('Error: {} already exists but configured remote does not'
                     + ' match {}'.format(self.directory, self.url))
        return True

    def stash(self):
        try:
            cmd = subprocess.run(['git', '-C', self.directory, 'stash'],
                    check=True, capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to stash {}:\n{}'.format(self.directory,
                                                      e.stderr))
        if cmd.stdout.strip() != 'No local changes to save':
            print(self.directory + ':\n' + cmd.stdout)
        return 0

class NeovimPlugin(GitRepo):
    def __init__(self, url, branch='master', yarn_install_required=False):
        self.directory = (os.path.expanduser(
            '~/.local/share/nvim/site/pack/plugins/start/') + re.sub('\.git$',
                '', url).split('/')[-1])
        self.yarn_install_required = yarn_install_required
        super().__init__(url, branch, self.directory)

    def requires_yarn_install(self):
        return self.yarn_install_required

    def yarn_install(self):
        try:
            subprocess.run(['yarn', 'install'], check=True,
                    capture_output=True, cwd=self.directory, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to `yarn install` Neovim plugin at '
                     + '{}:\n{}'.format(self.directory, e.stderr))

class ZshPlugin(GitRepo):
    def __init__(self, url, branch='master'):
        directory = (os.path.expanduser( '~/.zsh/') + re.sub('\.git$', '',
            url).split('/')[-1])
        super().__init__(url, branch, directory)

class VagrantBox(object):
    _instances = []

    def __init__(self, name, provider, latest_version):
        self._instances.append(self)
        self.name = name
        self.provider = provider
        self.latest_version = latest_version
        self.installed_versions = []

    def name(self):
        return self.name

    def append_to_installed_versions(self, version):
        if version not in self.installed_versions:
            self.installed_versions.append(version)
            self.installed_versions.sort()

    def install_latest(self):
        if self.latest_version not in self.installed_versions:
            try:
                subprocess.run(['vagrant', 'box', 'add', '--clean',
                    '--provider', self.provider, self.name], check=True)
            except subprocess.CalledProcessError as e:
                sys.exit('Failed to install latest version of Vagrant box'
                         + '{}:\n{}'.format(self.name, e.stderr))

    def installed_versions(self):
        return self.installed_versions

def apt_packages():
    try:
        subprocess.run(['sudo', 'apt-get', 'update'], check=True,
                capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to update APT package index files:\n' + e.stderr)

    try:
        subprocess.run(['sudo', 'apt-get', '--yes', 'dist-upgrade'],
                check=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to update packages:\n' + e.stderr)

def download_file(url, path):
    path = os.path.expanduser(path)

    # Use curl as there is no guarantee the requests library will be installed
    try:
        subprocess.run(['curl', '--create-dirs', '--location', url, '--output',
            path], check=True, text=True)
    except subprocess.CalledProcessError as e:
        print('Failed to download {} to {}:\n{}'.format(url, path, e.stderr),
              file=sys.stderr)

def download_images(urls):
    for url in urls:
        print('Downloading image {}:'.format(url))
        download_file(url, '~/images/' + url.split('/')[-1])

def homebrew_packages():
    try:
        subprocess.run(['brew', 'update'], check=True, capture_output=True,
                text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to fetch latest version of Homebrew and formulae:\n'
                 + e.stderr)

    try:
        cmd = subprocess.run(['brew', 'outdated', '--json'], check=True,
                capture_output=True, text=True) 
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to get list of outdated packages:\n' + e.stderr)

    outdated = json.loads(cmd.stdout)

    formulae = []
    for formula in outdated['formulae']:
        formulae.append(
                formula['name'] + ' (' + formula['current_version'] + ')')
    if formulae:
        print('The following formulae will be updated:')
        print('\n'.join(formulae))

    casks = []
    for cask in outdated['casks']:
        casks.append(
                cask['name'] + ' (' + cask['current_version'] + ')')
    if casks:
        print('The following casks will be updated:')
        print('\n'.join(casks))

    try:
        subprocess.run(['brew', 'upgrade'], check=True, capture_output=True,
                       text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to update packages (read the error carefully; this '
              'may not truly be an error):\n' + e.stderr)

def packages():
    if sys.platform.startswith('darwin'):
        homebrew_packages()
    elif sys.platform.startswith('linux'):
        with open('/etc/os-release') as f:
            lines = f.readlines()
        if 'Ubuntu' or 'Debian' in lines[0]:
            apt_packages()
        else:
            print('Unsupported Linux distribution, not updating packages',
                    file=sys.stderr)
            return 1
    else:
        print('Unsupported platform, not updating packages', file=sys.stderr)
        return 1

def pull_or_clone_git_repos(repos):
    try:
        os.makedirs(os.path.expanduser('~/git/'), exist_ok=True)
    except:
        sys.exit('Failed to create ~/git/')

    for url, branch, directory, remotes in repos:
        repo = GitRepo(url, branch, directory, remotes)
        if repo.is_present():
            repo.stash()
            repo.checkout()
            repo.pull()
        else:
            repo.clone()

def pull_or_clone_neovim_plugins(plugins):
    try:
        os.makedirs(os.path.expanduser(
            '~/.local/share/nvim/site/pack/plugins/start/'), exist_ok=True)
    except:
        sys.exit('Failed to create'
                 + '~/.local/share/nvim/site/pack/plugins/start/')

    for url, branch, yarn_install_required in plugins:
        plugin = NeovimPlugin(url, branch, yarn_install_required)
        if plugin.is_present():
            plugin.stash()
            plugin.checkout()
            plugin.pull()
        else:
            plugin.clone()
        if plugin.requires_yarn_install():
            plugin.yarn_install()

def pull_or_clone_zsh_plugins(plugins):
    try:
        os.makedirs(os.path.expanduser('~/.zsh/'), exist_ok=True)
    except:
        sys.exit('Failed to create ~/.zsh/')

    for url, branch in plugins:
        plugin = ZshPlugin(url, branch)
        if plugin.is_present():
            plugin.stash()
            plugin.checkout()
            plugin.pull()
        else:
            plugin.clone()

    print('Downloading iTerm2 shell integration for Zsh:')
    download_file('https://iterm2.com/shell_integration/zsh',
            '~/.zsh/iterm2_shell_integration.zsh')

def vagrant_boxes():
    try:
        cmd = subprocess.run(['vagrant', 'box', 'outdated', '--global'],
                check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to get installed Vagrant boxes:\n' + e.stderr)

    # Strip characters from Vagrant output. Lines (not yet split) will resemble
    # one of either:
    # bento/ubuntu-16.04 for vmware_desktop is outdated Current: 202103.19.0. Latest: 202104.19.0
    # bento/ubuntu-14.04 for vmware_desktop v201808.24.0 is up to date
    transtable = cmd.stdout.maketrans({
        '*': '',
        "'": "",
        '(': '',
        ')': '',
        '!': ''
    })
    output = cmd.stdout.translate(transtable)

    for line in output.split('\n'):
        line = line.lstrip(' ').split(' ')
        box_instance_exists = False

        if 'outdated' in line:
            for box in VagrantBox._instances:
                if box.name == line[0]:
                    box.append_to_installed_versions(line[6])
                    box_instance_exists = True
                    break
            if box_instance_exists is not True:
                box = VagrantBox(line[0], line[2], line[-1])
                box.append_to_installed_versions(line[6])

        elif 'up' in line:
            for box in VagrantBox._instances:
                if box.name == line[0]:
                    box.append_to_installed_versions(line[3].strip('(v)'))
                    box_instance_exists = True
                    break
            if box_instance_exists is not True:
                latest_version = line[3].strip('(v)')
                box = VagrantBox(line[0], line[2], latest_version)
                box.append_to_installed_versions(latest_version)

    for box in VagrantBox._instances:
        box.install_latest()

    try:
        subprocess.run(['vagrant', 'box', 'prune', '--force',
            '--keep-active-boxes'], check=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to prune unused versions of Vagrant boxes:\n'
                 + e.stderr)

def yarn_packages(packages):
    yarn_base_cmd = ['yarn', 'global']
    if sys.platform.startswith('linux'):
        yarn_base_cmd.insert(0, 'sudo')

    # List of installed packages
    ## Doesn't require elevated privileges
    try:
        cmd = subprocess.run(yarn_base_cmd + ['list'], check=True,
                             capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to get installed Node.js packages from Yarn:\n'
                 + e.stderr)

    installed_packages = cmd.stdout.splitlines()
    installed_packages = [line.removeprefix('info "').rpartition('@')[0] for
                          line in installed_packages if 'info "' in line]

    # Install packages if missing
    missing_packages = [package for package in packages if package not in
                        installed_packages]
    if len(missing_packages) > 0:
        try:
            cmd = subprocess.run(yarn_base_cmd + ['add'] + missing_packages,
                    check=True, capture_output=True, text=True)
        except subprocess.CalledProcessError as e:
            sys.exit('Failed to install missing Node.js packages:\n'
                     + e.stderr)

    # Update packages
    try:
        cmd = subprocess.run(yarn_base_cmd + ['upgrade'], check=True,
                capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        sys.exit('Failed to update Node.js packages:\n' + e.stderr)

def main():
    parser = argparse.ArgumentParser()

    # Only first long option is used as in args
    parser.add_argument('-g', '--git',
            help='pull, or clone if not present, Git repositories',
            action='store_true')
    parser.add_argument('-i', '--images',
            help='download or update cloud images',
            action='store_true')
    parser.add_argument('-n', '--neovim',
            help='pull, or clone if not present, Neovim plugins',
            action='store_true')
    parser.add_argument('-p', '--packages',
            help='update packages (Homebrew for Mac, apt for Debian/Ubuntu)',
            action='store_true')
    parser.add_argument('-v', '--vagrant', help='update Vagrant boxes',
            action='store_true')
    parser.add_argument('-y', '--yarn', help='install or update Yarn packages',
            action='store_true')
    parser.add_argument('-z', '--zsh', help='update Zsh plugins',
            action='store_true')
    args = parser.parse_args()

    # If no arguments specified, update everything apart from Vagrant boxes and
    # cloud images
    if True not in vars(args).values():
        if 'git' in vars(repolists):
            pull_or_clone_git_repos(repolists.git)
        if 'neovim' in vars(repolists):
            pull_or_clone_neovim_plugins(repolists.neovim)
        if 'yarn' in vars(repolists):
            yarn_packages(repolists.yarn)
        if 'zsh' in vars(repolists):
            pull_or_clone_zsh_plugins(repolists.zsh)
        packages()

    else:
        if args.git is True and 'git' in vars(repolists):
            pull_or_clone_git_repos(repolists.git)
        if args.images is True and 'images' in vars(repolists):
            download_images(repolists.images)
        if args.neovim is True and 'neovim' in vars(repolists):
            pull_or_clone_neovim_plugins(repolists.neovim)
        if args.yarn is True and 'yarn' in vars(repolists):
            yarn_packages(repolists.yarn)
        if args.zsh is True and 'zsh' in vars(repolists):
            pull_or_clone_zsh_plugins(repolists.zsh)
        if args.vagrant is True:
            vagrant_boxes()
        if args.packages is True:
            packages()

if __name__ == "__main__":
    main()
